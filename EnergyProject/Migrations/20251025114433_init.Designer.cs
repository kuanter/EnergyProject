// <auto-generated />
using System;
using EnergyProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnergyProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251025114433_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnergyProject.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardDataId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccountId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EnergyProject.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CardDataId")
                        .HasColumnType("int");

                    b.Property<float>("ConsumptionKWh")
                        .HasColumnType("real");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccountId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("EnergyProject.Models.CardData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CardDatas");
                });

            modelBuilder.Entity("EnergyProject.Models.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccountId")
                        .IsUnique();

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("EnergyProject.Models.MeterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<float>("ValueKWh")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("EnergyProject.Models.PaymentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentAccounts");
                });

            modelBuilder.Entity("EnergyProject.Models.PowerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PaymentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccountId")
                        .IsUnique();

                    b.ToTable("PowerStatuses");
                });

            modelBuilder.Entity("EnergyProject.Models.Tariff", b =>
                {
                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<float>("PricePerKWh")
                        .HasColumnType("real");

                    b.HasKey("TariffId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("EnergyProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnergyProject.Models.Address", b =>
                {
                    b.HasOne("EnergyProject.Models.PaymentAccount", "PaymentAccount")
                        .WithOne("Address")
                        .HasForeignKey("EnergyProject.Models.Address", "PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyProject.Models.Bill", b =>
                {
                    b.HasOne("EnergyProject.Models.PaymentAccount", "PaymentAccount")
                        .WithMany("Bills")
                        .HasForeignKey("PaymentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("EnergyProject.Models.CardData", b =>
                {
                    b.HasOne("EnergyProject.Models.Address", "Address")
                        .WithOne("CardData")
                        .HasForeignKey("EnergyProject.Models.CardData", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyProject.Models.Bill", "Bill")
                        .WithOne("CardData")
                        .HasForeignKey("EnergyProject.Models.CardData", "BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyProject.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyProject.Models.Meter", b =>
                {
                    b.HasOne("EnergyProject.Models.PaymentAccount", "PaymentAccount")
                        .WithOne("Meter")
                        .HasForeignKey("EnergyProject.Models.Meter", "PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("EnergyProject.Models.MeterReading", b =>
                {
                    b.HasOne("EnergyProject.Models.Meter", "Meter")
                        .WithMany("MeterReadings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("EnergyProject.Models.PaymentAccount", b =>
                {
                    b.HasOne("EnergyProject.Models.User", "User")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyProject.Models.PowerStatus", b =>
                {
                    b.HasOne("EnergyProject.Models.PaymentAccount", "PaymentAccount")
                        .WithOne("PowerStatus")
                        .HasForeignKey("EnergyProject.Models.PowerStatus", "PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("EnergyProject.Models.Tariff", b =>
                {
                    b.HasOne("EnergyProject.Models.PaymentAccount", "PaymentAccount")
                        .WithOne("Tariff")
                        .HasForeignKey("EnergyProject.Models.Tariff", "TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("EnergyProject.Models.Address", b =>
                {
                    b.Navigation("CardData")
                        .IsRequired();
                });

            modelBuilder.Entity("EnergyProject.Models.Bill", b =>
                {
                    b.Navigation("CardData")
                        .IsRequired();
                });

            modelBuilder.Entity("EnergyProject.Models.Meter", b =>
                {
                    b.Navigation("MeterReadings");
                });

            modelBuilder.Entity("EnergyProject.Models.PaymentAccount", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Bills");

                    b.Navigation("Meter")
                        .IsRequired();

                    b.Navigation("PowerStatus")
                        .IsRequired();

                    b.Navigation("Tariff")
                        .IsRequired();
                });

            modelBuilder.Entity("EnergyProject.Models.User", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("PaymentAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
